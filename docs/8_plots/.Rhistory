PBid
classification <- read.delim("sqanti_output/qc_classification.txt") %>%
dplyr::select(isoform, chrom, strand, length, exons, subcategory, ORF_length, CDS_length,
iso_exp, gene_exp, predicted_NMD, within_CAGE_peak, within_polyA_site,
polyA_motif_found, ORF_seq, ratio_TSS) %>%
dplyr::rename(PBid = isoform)
classification %>% head
classification <- read.delim("sqanti_output/qc_classification.txt") %>%
dplyr::select(isoform, chrom, strand, length, exons, subcategory, ORF_length, CDS_length,
iso_exp, gene_exp, predicted_NMD, within_CAGE_peak, within_polyA_site,
polyA_motif_found, ratio_TSS) %>%
dplyr::rename(PBid = isoform)
classification %>% head
df <- left_join(classification, transdecoder_aligned, by="PBid")
View(df)
df <- left_join(transdecoder_aligned, classification, by="PBid")
View(df)
deeploc %>% head
df %>% head
deeploc <- read.csv("deeploc/deeploc_fast.csv") %>%
dplyr::rename(PeptideId = Protein_ID)
df <- left_join(df, deeploc, by="PeptideId")
df <- left_join(deeploc, df, by="PeptideId")
df <- left_join(transdecoder_aligned, classification, by="PBid")
df <- left_join(deeploc, df, by="PeptideId")
View(df)
deeploc %>% head
deeploc[2:ncol(deeploc)]
deeploc[2:ncol(deeploc)] %>% distinct() %>% nrow()
deeploc <- read.csv("deeploc/deeploc_fast.csv") %>%
dplyr::rename(PeptideId = Protein_ID) %>%
dplyr::select(PeptideId, Localizations, Signals)
deeploc <- read.csv("deeploc/deeploc_fast.csv") %>%
dplyr::rename(PeptideId = Protein_ID) %>%
dplyr::select(PeptideId, Localizations, Signals) %>% distinct()
df <- left_join(transdecoder_aligned, classification, by="PBid")
df$PeptideId
df$PeptideId %>% unique
df <- left_join(df, deeploc, by="PeptideId")
transmembrane %>% head
transmembrane <- read.delim("transcoder/tmhmm_regions.txt", header = FALSE)
transmembrane %>% head
transmembrane <- read.delim("transcoder/tmhmm_regions.txt", header = FALSE) %>%
dplyr::select(V1, V3) %>%
dplyr::rename(PeptideId = V1, transmembrane_location = V3)
transmembrane <- read.delim("transcoder/tmhmm_regions.txt", header = FALSE) %>%
dplyr::select(V1, V3) %>%
dplyr::rename(PeptideId = V1, membrane_location = V3)
transmembrane %>% head
df <- left_join(df, transmembrane, by = "PeptideId")
df <- left_join(transdecoder_aligned, classification, by="PBid")
df <- left_join(df, deeploc, by="PeptideId")
df <- left_join(df, transmembrane, by = "PeptideId")
transmembrane$transmembrane <- ifelse(transmembrane$membrane_location == "TMhelix", TRUE, FALSE)
transmembrane$transmembrane == TRUE
transmembrane <- transmembrane[transmembrane$transmembrane == TRUE, ]
df <- left_join(transdecoder_aligned, classification, by="PBid")
df <- left_join(df, deeploc, by="PeptideId")
transmembrane <- transmembrane[transmembrane$transmembrane == TRUE, c("PeptideId", "transmembrane")]
df <- left_join(transdecoder_aligned, classification, by="PBid")
df <- left_join(df, deeploc, by="PeptideId")
df <- left_join(df, transmembrane, by = "PeptideId")
df <- left_join(transdecoder_aligned, classification, by="PBid")
df <- left_join(df, deeploc, by="PeptideId")
df <- left_join(df, transmembrane, by = "PeptideId")
View(df)
transmembrane <- transmembrane[transmembrane$transmembrane == TRUE, c("PeptideId", "transmembrane")] %>% distinct()
transmembrane <- read.delim("transcoder/tmhmm_regions.txt", header = FALSE) %>%
dplyr::select(V1, V3, V4) %>%
dplyr::rename(PeptideId = V1, membrane_location = V3, transmembrane_region_AA_range = V4)
transmembrane %>% head
transmembrane$transmembrane_region_AA_range
transmembrane <- transmembrane %>%
separate(transmembrane_region_AA_range, into = c("begin", "end"), sep = "\\s+", convert = TRUE, extra = "merge")
transmembrane %>% head
transmembrane <- read.delim("transcoder/tmhmm_regions.txt", header = FALSE) %>%
dplyr::select(V1, V3, V4) %>%
dplyr::rename(PeptideId = V1, membrane_location = V3, transmembrane_region_AA_range = V4)
transmembrane <- transmembrane$transmembrane_region_AA_range %>%
separate(transmembrane_region_AA_range, into = c("begin", "end"), sep = "\\s+", convert = TRUE, extra = "merge")
separate(transmembrane$transmembrane_region_AA_range, into = c("begin", "end"), sep = "\\s+", convert = TRUE, extra = "merge")
transmembrane %>%
separate(transmembrane_region_AA_range, into = c("begin", "end"),
sep = "\\s+", convert = TRUE, extra = "merge")
transmembrane <- read.delim("transcoder/tmhmm_regions.txt", header = FALSE) %>%
dplyr::select(V1, V3, V4) %>%
dplyr::rename(PeptideId = V1, membrane_location = V3, transmembrane_region_AA_range = V4)
transmembrane <- transmembrane %>%
separate(transmembrane_region_AA_range, into = c("begin", "end"),
sep = "\\s+", convert = TRUE, extra = "merge")
transmembrane %>% gead
transmembrane %>% head
transmembrane <- transmembrane %>%
separate(transmembrane_region_AA_range, into = c("begin", "end"),
sep = "\\s+", convert = TRUE)
transmembrane <- read.delim("transcoder/tmhmm_regions.txt", header = FALSE) %>%
dplyr::select(V1, V3, V4) %>%
dplyr::rename(PeptideId = V1, membrane_location = V3, transmembrane_region_AA_range = V4)
transmembrane <- transmembrane %>%
separate(transmembrane_region_AA_range, into = c("begin", "end"),
sep = "\\s+", convert = TRUE)
transmembrane <- read.delim("transcoder/tmhmm_regions.txt", header = FALSE) %>%
dplyr::select(V1, V3, V4) %>%
dplyr::rename(PeptideId = V1, membrane_location = V3, transmembrane_region_AA_range = V4)
transmembrane %>%
separate(transmembrane_region_AA_range, into = c("begin", "end"),
sep = "\\s+", convert = TRUE)
transmembrane <- read.delim("transcoder/tmhmm_regions.txt", header = FALSE) %>%
dplyr::select(V1, V3, V4) %>%
dplyr::rename(PeptideId = V1, membrane_location = V3, transmembrane_region_AA_range = V4) %>%
dplyr::mutate(Transmembrane = case_when(transmembrane$membrane_location == "TMhelix" ~ TRUE,
transmembrane$membrane_location != "TMhelix" ~ FALSE,
TRUE ~ NA)) %>%
distinct()
transmembrane <- read.delim("transcoder/tmhmm_regions.txt", header = FALSE) %>%
dplyr::select(V1, V3, V4) %>%
dplyr::rename(PeptideId = V1, membrane_location = V3, transmembrane_region_AA_range = V4) %>%
dplyr::mutate(Transmembrane = case_when(membrane_location == "TMhelix" ~ TRUE,
membrane_location != "TMhelix" ~ FALSE,
TRUE ~ NA)) %>%
distinct()
transmembrane %>% head
transmembrane <- read.delim("transcoder/tmhmm_regions.txt", header = FALSE) %>%
dplyr::select(V1, V3, V4) %>%
dplyr::rename(PeptideId = V1, membrane_location = V3, transmembrane_region_AA_range = V4) %>%
dplyr::mutate(Transmembrane = case_when(membrane_location == "TMhelix" ~ TRUE,
membrane_location != "TMhelix" ~ FALSE,
TRUE ~ NA)) %>%
dplyr::filter(Transmembrane == TRUE) %>% distinct()
transmembrane %>% head
transmembrane <- read.delim("transcoder/tmhmm_regions.txt", header = FALSE) %>%
dplyr::select(V1, V3) %>%
dplyr::rename(PeptideId = V1, membrane_location = V3) %>%
dplyr::mutate(Transmembrane = case_when(membrane_location == "TMhelix" ~ TRUE,
membrane_location != "TMhelix" ~ FALSE,
TRUE ~ NA)) %>%
dplyr::filter(Transmembrane == TRUE) %>% distinct()
transmembrane %>% head
df <- left_join(transdecoder_aligned, classification, by="PBid")
df <- left_join(df, deeploc, by="PeptideId")
df <- left_join(df, transmembrane, by = "PeptideId")
View(df)
dplyr::filter(Transmembrane == TRUE)
df <- left_join(transdecoder_aligned, classification, by="PBid")
df <- left_join(df, deeploc, by="PeptideId")
df <- left_join(df, transmembrane, by = "PeptideId")
View(df)
transmembrane <- read.delim("transcoder/tmhmm_regions.txt", header = FALSE) %>%
dplyr::select(V1, V3) %>%
dplyr::rename(PeptideId = V1, membrane_location = V3) %>%
dplyr::mutate(Transmembrane = case_when(membrane_location == "TMhelix" ~ TRUE,
membrane_location != "TMhelix" ~ FALSE,
TRUE ~ NA)) %>%
dplyr::select(PeptideId, Transmembrane) %>%
dplyr::filter(Transmembrane == TRUE)
transmembrane %>% head
transmembrane <- read.delim("transcoder/tmhmm_regions.txt", header = FALSE) %>%
dplyr::select(V1, V3) %>%
dplyr::rename(PeptideId = V1, membrane_location = V3) %>%
dplyr::mutate(Transmembrane = case_when(membrane_location == "TMhelix" ~ TRUE,
membrane_location != "TMhelix" ~ FALSE,
TRUE ~ NA)) %>%
dplyr::select(PeptideId, Transmembrane) %>%
dplyr::filter(Transmembrane == TRUE) %>% distinct()
df <- left_join(transdecoder_aligned, classification, by="PBid")
df <- left_join(df, deeploc, by="PeptideId")
df <- left_join(df, transmembrane, by = "PeptideId")
View(df)
protein_domain %>% head
df %>% head
protein_domain %>% head
protein_domain <- read_domtblout("transcoder/pfam.domtblout") %>% as.data.frame() %>%
dplyr::select(query_name, domain_name, domain_accession, domain_ievalue)
protein_domain %>% head
protein_domain <- read_domtblout("transcoder/pfam.domtblout") %>% as.data.frame() %>%
dplyr::filter(domain_ievalue < 10E-10) %>%
dplyr::select(query_name, domain_name, domain_accession, domain_ievalue)
protein_domain <- read_domtblout("transcoder/pfam.domtblout") %>% as.data.frame() %>%
dplyr::filter(domain_ievalue < 10E-10) %>%
dplyr::select(query_name, domain_name, domain_accession)
protein_domain %>% head
protein_domain <- read_domtblout("transcoder/pfam.domtblout") %>% as.data.frame() %>%
dplyr::filter(domain_ievalue < 10E-10) %>%
dplyr::select(query_name, domain_name, domain_accession) %>% distinct()
protein_domain %>% head
protein_domain$query_name %in% df$PeptideId
protein_domain$query_name %in% df$PeptideId %>% head
protein_domain$query_name %in% df$PeptideId %>% sum()
df$PeptideId %in% protein_domain$query_name %>% sum()
protein_domain <- read_domtblout("transcoder/pfam.domtblout") %>% as.data.frame() %>%
dplyr::filter(domain_ievalue < 10E-10) %>%
dplyr::select(query_name, domain_name, domain_accession) %>%
dplyr::rename(PeptideId=protein_domain) %>%
distinct()
protein_domain <- read_domtblout("transcoder/pfam.domtblout") %>% as.data.frame() %>%
dplyr::filter(domain_ievalue < 10E-10) %>%
dplyr::select(query_name, domain_name, domain_accession) %>%
dplyr::rename(PeptideId=query_name) %>%
distinct()
df <- left_join(df, protein_domain, by="PeptideId")
df %>% head
getwd()
list.files()
write.csv(df, file = file.path(sample_id, "isoform_summary.csv"))
write.csv(df, file = "isoform_summary.csv")
for(sample_id in sample_list){
setwd(sample_id)
classification <- read.delim("sqanti_output/qc_classification.txt") %>%
dplyr::select(isoform, chrom, strand, length, exons, subcategory, ORF_length, CDS_length,
iso_exp, gene_exp, predicted_NMD, within_CAGE_peak, within_polyA_site,
polyA_motif_found, ratio_TSS) %>%
dplyr::rename(PBid = isoform)
deeploc <- read.csv("deeploc/deeploc_fast.csv") %>%
dplyr::rename(PeptideId = Protein_ID) %>%
dplyr::select(PeptideId, Localizations, Signals) %>% distinct()
transmembrane <- read.delim("transcoder/tmhmm_regions.txt", header = FALSE) %>%
dplyr::select(V1, V3) %>%
dplyr::rename(PeptideId = V1, membrane_location = V3) %>%
dplyr::mutate(Transmembrane = case_when(membrane_location == "TMhelix" ~ TRUE,
membrane_location != "TMhelix" ~ FALSE,
TRUE ~ NA)) %>%
dplyr::select(PeptideId, Transmembrane) %>%
dplyr::filter(Transmembrane == TRUE) %>% distinct()
load("~/Desktop/MRes.Project.2/data/2_isoform/0700055A/BRCA_02_ORF_annotation/Transdecoder_to_Pacbio.Rd")
protein_domain <- read_domtblout("transcoder/pfam.domtblout") %>% as.data.frame() %>%
dplyr::filter(domain_ievalue < 10E-10) %>%
dplyr::select(query_name, domain_name, domain_accession) %>%
dplyr::rename(PeptideId=query_name) %>%
distinct()
df <- left_join(transdecoder_aligned, classification, by="PBid")
df <- left_join(df, deeploc, by="PeptideId")
df <- left_join(df, transmembrane, by = "PeptideId")
df <- left_join(df, protein_domain, by="PeptideId")
write.csv(df, file = "isoform_summary.csv")
}
source("~/Desktop/MRes.Project.2/codes/2_ORF_annotation/setup.R")
setwd("~/Desktop/MRes.Project.2/data/1_preprocess/")
source("~/Desktop/MRes.Project.2/codes/2_ORF_annotation/concatenate.R", echo=TRUE)
source("~/Desktop/MRes.Project.2/codes/2_ORF_annotation/setup.R")
setwd("~/Desktop/MRes.Project.2/data/1_preprocess/")
source("~/Desktop/MRes.Project.2/codes/2_ORF_annotation/concatenate.R", echo=TRUE)
source("~/Desktop/MRes.Project.2/codes/2_ORF_annotation/concatenate.R", echo=TRUE)
source("~/Desktop/MRes.Project.2/codes/2_ORF_annotation/concatenate.R", echo=TRUE)
source("http://app.tappAS.org/resources/downloads/tappAS_packages.R")
install.packages("devtools")
library(devtools)
install_github("gu-mi/GOglm")
install.packages("devtools")
conda install bioconda::bioconductor-mdgsa
source("http://app.tappAS.org/resources/downloads/tappAS_packages.R")
library(DEXSeq)
library(pkg_bioc)
##  Packages installed using biocLite()
pkg = c("DEXSeq","edgeR","NOISeq","goseq","mdgsa", "maSigPro",
"rlang","callr", "devtools","ggpubr","ggplot2","MASS","plyr",
"VennDiagram", "ggrepel","cowplot","tidyverse","UpSetR")
for(package in pkg){
library(package)
}
##  Packages installed using biocLite()
pkg = c("DEXSeq","edgeR","NOISeq","goseq","mdgsa", "maSigPro",
"rlang","callr", "devtools","ggpubr","ggplot2","MASS","plyr",
"VennDiagram", "ggrepel","cowplot","tidyverse","UpSetR")
# Function to install missing packages
install_if_missing <- function(p) {
if (!requireNamespace(p, quietly = TRUE)) {
install.packages(p, dependencies = TRUE)
}
if (!requireNamespace(p, quietly = TRUE)) {
BiocManager::install(p, dependencies = TRUE)
}
}
# Install and load packages
for (package in pkg) {
install_if_missing(package)
library(package, character.only = TRUE)
}
library (devtools)
install_github ("dmontaner/mdgsa")
BiocManager::install("KEGG.db")
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
BiocManager::install("biocLite")
BiocManager::install(version = "3.12")
url_kegg_package <- c("http://bioconductor.org/packages/release/data/annotation/src/contrib/KEGG.db_3.2.3.tar.gz")
download.file(url = url_kegg_package, destfile = paste0(root, "/tar_gz/KEGG.db_3.2.3.tar.gz"))
download.file(url = url_kegg_package, destfile = "/tar_gz/KEGG.db_3.2.3.tar.gz")
download.file(url = url_kegg_package, destfile = "KEGG.db_3.2.3.tar.gz")
requireNamespace("DEXSeq", quietly = TRUE)
requireNamespace("DEXSeq")
!requireNamespace("DEXSeq", quietly = TRUE)
##  Packages installed using biocLite()
pkg = c("DEXSeq","edgeR","NOISeq","goseq","mdgsa", "maSigPro",
"rlang","callr", "devtools","ggpubr","ggplot2","MASS","plyr",
"VennDiagram", "ggrepel","cowplot","tidyverse","UpSetR")
system("java -jar tappas.jar")
setwd("~/Desktop/MRes.Project.2/codes/0_packages/")
system("java -jar tappas.jar")
gc()
gc()
gc()
source("http://app.tappAS.org/resources/downloads/tappAS_packages.R")
install.packages("~/Downloads/knitr_1.48.tar.gz", repos = NULL, type = "source")
install.packages("evaluate")
install.packages("~/Downloads/evaluate_0.13.tar.gz", repos = NULL, type = "source")
install.packages("highr")
install.packages("yaml")
install.packages("~/Downloads/knitr_1.48.tar.gz", repos = NULL, type = "source")
source("http://app.tappAS.org/resources/downloads/tappAS_packages.R")
install.packages("~/Downloads/roxygen2_7.3.2.tar.gz", repos = NULL, type = "source")
install.packages("brew")
install.packages("cli")
install.packages("commonmark")
install.packages("desc")
install.packages("pkgload")
install.packages("purrr")
install.packages("R6")
install.packages("rlang")
install.packages("stringi")
install.packages("stringr")
install.packages("withr")
install.packages("xml2")
install.packages("cpp11")
install.packages("~/Downloads/roxygen2_7.3.2.tar.gz", repos = NULL, type = "source")
source("http://app.tappAS.org/resources/downloads/tappAS_packages.R")
install.packages("~/Downloads/KernSmooth_2.23-24.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/mgcv_1.9-1.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/nlme_3.1-165.tar.gz", repos = NULL, type = "source")
source("http://app.tappAS.org/resources/downloads/tappAS_packages.R")
install.packages("~/Downloads/downlit_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/httr2_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/openssl_2.2.0.tar.gz", repos = NULL, type = "source")
install.packages("openssl")
install.packages("")
install.packages("httr2")
library(evaluate)
install.packages("pbkrtest")
install.packages("~/Downloads/pbkrtest_0.4-7.tar.gz", repos = NULL, type = "source")
library("devtools"); install_github("lme4/lme4",dependencies=TRUE)
install.packages("devtools")
source("http://app.tappAS.org/resources/downloads/tappAS_packages.R")
install.packages("~/Desktop/knitr_1.48.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/packages/evaluate_0.13.tar.gz", repos = NULL, type = "source")
install.packages("highr")
install.packages("yaml")
source("http://app.tappAS.org/resources/downloads/tappAS_packages.R")
install.packages("~/Desktop/packages/KernSmooth_2.23-24.tar.gz", repos = NULL, type = "source")
install.packages("KernSmooth")
install.packages("nlme")
source("http://app.tappAS.org/resources/downloads/tappAS_packages.R")
install.packages("rtracklayer")
BiocManager::install("rtracklayer")
install.packages("ggplot2")
source("http://app.tappAS.org/resources/downloads/tappAS_packages.R")
install.packages("~/Downloads/ggplot2_3.4.4.tar.gz", repos = NULL, type = "source")
install.packages("munsell")
install.packages("~/Downloads/ggplot2_3.4.4.tar.gz", repos = NULL, type = "source")
source("http://app.tappAS.org/resources/downloads/tappAS_packages.R")
BiocManager::install("mdgsa")
library (devtools)
install.packages("devtools")
install.packages("rmarkdown")
install.packages("htmltools")
install.packages("bslib")
install.packages("devtools")
library (devtools)
install.pal
install.packages("shiny")
library(devtools)
install_github("dmontaner/mdgsa")
biocLite("KEGG.db")
source("https://bioconductor.org/biocLite.R")
library(NOISeq)
library(NOISeq)
library(dplyr)
library(magrittr)
library(tidyverse)
install.packages("readr")
library(NOISeq)
library(dplyr)
library(magrittr)
library(tidyverse)
library(tidyr)
library(NOISeq)
library(maSigPro)
library(edgeR)
library(DESeq2)
library(DEXSeq)
library(goseq)
install.packages("goseq")
BiocManager::install("goseq")
BiocManager::install("goseq", force = TRUE)
source("~/Library/CloudStorage/GoogleDrive-pollyhunglingshan@gmail.com/My Drive/metabolomics/codes/PLS.R", echo=TRUE)
setwd("/Volumes/Still_Life/OV_AlternativeSplicing/tappAS/")
load("/Volumes/Still_Life/OV_AlternativeSplicing/plots/docs/pacbioTPM.Rd")
head(tpm_pacbio)
write.table(tpm_pacbio, "/Volumes/Still_Life/OV_AlternativeSplicing/tappAS/SUPPA2/tpm.txt", sep = "\t", quote = F, row.names = T, col.names = T)
PSI <- read.table("SUPPA2/sqanti_events.psi")
View(PSI)
View(PSI)
View(PSI)
PSI <- read.table("SUPPA2/sqanti_events.psi", check.names = F)
grepl("PB.8038", rownames(PSI))
grepl("PB.8038", rownames(PSI)) %>% sum()
library(magrittr)
grepl("PB.8038", rownames(PSI)) %>% sum()
MSLN <- PSI %>% dplyr::filter(grepl("PB.8038", rownames(PSI)))
View(MSLN)
head(tpm_pacbio)
is.na(tpm_pacbio)
PSI <- read.table("SUPPA2/sqanti_events.psi", check.names = F)
View(PSI)
MSLN <- PSI %>% dplyr::filter(grepl("PB.8038", rownames(PSI)))
View(MSLN)
View(tpm_pacbio)
fill.NA(PSI,mode="mean",k=10)
library(DMwR)
install.packages("DMwR")
install.packages("VIM")
library(VIM)
PSI <- kNN(PSI, k = 5)
PSI <- read.table("SUPPA2/sqanti_events.psi", check.names = F)
View(tpm_pacbio)
dim(tpm_pacbio)
event_generated <- read.table("SUPPA2/sqanti.events.ioe")
View(event_generated)
event_generated <- read.table("SUPPA2/sqanti.events.ioe")
PSI <- read.table("SUPPA2/sqanti_events.psi", check.names = F)
View(PSI)
event_generated <- read.table("SUPPA2/sqanti.events.ioe")
event_generated <- read.table("SUPPA2/sqanti.events.ioe")
PSI <- read.table("SUPPA2/sqanti_events.psi", check.names = F)
PSI <- kNN(PSI, k = 5)
View(PSI)
PSI <- read.table("SUPPA2/sqanti_events.psi", check.names = F)
PSI2 <- kNN(PSI, k = 10)
View(PSI2)
View(PSI2)
PSI2 <- kNN(PSI, k = 10)
PSI2 <- PSI2[, 1:25]
View(PSI2)
rownames(PSI2) <- rownames(PSI)
View(MSLN)
View(PSI)
cor(PSI2)
cor_matrix <- cor(PSI2)
cor_matrix <- cor(PSI2, method = "spearman")
heatmap(cor_matrix)
PSI2 <- kNN(PSI, k = 5)
PSI2 <- PSI2[, 1:25]
cor_matrix <- cor(PSI2, method = "spearman")
heatmap(cor_matrix)
PSI %>% head
rowSums(PSI)
rowSums(PSI, na.rm = T)
PSI <- df[!apply(is.na(PSI), 1, all), ]
PSI <- PSI[!apply(is.na(PSI), 1, all), ]
PSI2 <- kNN(PSI, k = 10)
PSI2 <- PSI2[, 1:25]
rownames(PSI2) <- rownames(PSI)
cor_matrix <- cor(PSI2, method = "spearman")
heatmap(cor_matrix)
heatmap(cor_matrix, margins = c(10, 10))
load("docs/plot/metatable.Rd")
load("/Volumes/Still_Life/OV_AlternativeSplicing/plots/docs/plot/metatable.Rd")
list.files(/Volumes/Still_Life/OV_AlternativeSplicing/plots/docs/plot/)
list.files("/Volumes/Still_Life/OV_AlternativeSplicing/plots/docs/")
load("/Volumes/Still_Life/OV_AlternativeSplicing/plots/docs/metatable.Rd")
cluster1 <- c("HH12000124FN2", "HH12000157FN4", "T15-051-FT4", "T15-162-FT2", "T16-106-FT1",
"T16-002FN1", "T14-042FN3", "T15-036-FN2", "T16-035-FN2", "T16-088-FT2",
"T15-022-FT2", "0700181A", "090061A")
metatable$sample[metatable$cluster == "C1"]
metatable$sample[metatable$cluster == "C1"] %in% cluster1
setdiff( metatable$sample[metatable$cluster == "C1"], cluster1)
MSLN <- PSI %>% dplyr::filter(grepl("PB.8038", rownames(PSI)))
MSLN <- PSI2 %>% dplyr::filter(grepl("PB.8038", rownames(PSI)))
View(MSLN)
save(PSI2, "/Volumes/Still_Life/OV_AlternativeSplicing/plots/docs/psi.Rd")
save(list = "PSI2", file = "/Volumes/Still_Life/OV_AlternativeSplicing/plots/docs/psi.Rd")
library(ggplot2)
library(dplyr)
library(tidyverse)
library(RColorBrewer)
library(ggrepel)
library(magrittr)
colours = c("#FF8C9E", "#EF9C66", "#FFDA76", "#9CA777", "#41B3A2", "#378CE7", "#40679E", "#667BC6", "#D7C3F1", "#944E63")
color.heavy = c("#E07F80", "#95AAD3", "#F0CF7F", "#C195C4", "#94C47D", "#8785BA", "#E69965", "#72BEB7")
color.light = c("#EDAEAE", "#B9DBF4", "#F4E6AA", "#F0D8E9", "#C8DBC8", "#BAB4D8", "#F6BF93", "#B8E2DE")
source("~/Desktop/project/codes/code/8_plots/function.R")
load("mapping.Rd")
setwd("~/Desktop/project/plots/8_plots/")
load("mapping.Rd")
load("psi.Rd")
load("metatable.Rd")
load("cor_mtx.Rd")
load("mutation.Rd")
load("copy_number.Rd")
load("immune_mtx.Rd")
load("gsea.Rd")
## Plot 1: Patients can be clustered by
heatmap_result <- heatmap(cor_mtx, margins = c(10, 10))
gencode39 <- readGFF("~/Desktop/project/docs/data/0_references/gencode_v39.gtf")
library(rtracklayer)
gencode39 <- readGFF("~/Desktop/project/docs/data/0_references/gencode_v39.gtf")
gencode39 %>% head
gencode39$hgnc_id
gencode39 <- readGFF("~/Desktop/project/docs/data/0_references/gencode_v39.gtf")
gencode39 %>% head
gencode39$gene_name
gencode39$gene_name %>% unique %>% length
unique(gencode39$gene_name)[!grepl("ENSG", unique(gencode39$gene_name))]
write.table(unique(gencode39$gene_name)[!grepl("ENSG", unique(gencode39$gene_name))], "~/Desktop/gene_list.txt", sep = "\t", quote = F, row.names = F, col.names = F)
